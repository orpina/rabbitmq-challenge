version: '3.4'
name: rabbitmq-challenge

services:
  rabbitmq:
    image: rabbitmq:3.13.0-management
    ports:
      - "5672:5672"  # default port
      - "15672:15672"  # management UI port
    hostname: rabbitserver117
    container_name: rabbitmq-challenge_broker-server
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmqchallengeuser
      RABBITMQ_DEFAULT_PASS: rabbitmqchallengepass
    networks:
      - rabbitmq_challenge_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3    
  rabbitmqchallenge.mapping.api:
    container_name: rabbitmq-challenge_mapping-api
    build:
      context: .
      dockerfile: RabbitMQChallenge.Mapping.API/Dockerfile
    ports:
       - "3501:8081" # HTTPS_PORT
    depends_on:
      rabbitmq:
        condition: service_healthy    
    networks:
      - rabbitmq_challenge_network
    restart: on-failure:3
  rabbitmqchallenge.tracking.api:
    container_name: rabbitmq-challenge_tracking-api
    build:
      context: .
      dockerfile: RabbitMQChallenge.Tracking.API/Dockerfile
    ports:
       - "3502:8081" # HTTPS_PORT
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - rabbitmq_challenge_network
    restart: on-failure:3
  rabbitmqchallenge.analytics.api:
    container_name: rabbitmq-challenge_analytics-api
    build:
      context: .
      dockerfile: RabbitMQChallenge.Analytics.API/Dockerfile
    ports:
       - "3503:8081" # HTTPS_PORT
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - rabbitmq_challenge_network
    restart: on-failure:3

networks:
  rabbitmq_challenge_network:
    driver: bridge
